import pandas as pd

# đọc từ file bài 1
df = pd.read_csv('results.csv')

player_data = df[[
    'Player',
    'Nation',
    'Team',
    'Position',
    'Age',
    'Matches Played',
    'Starts',
    'Minutes',
    'non-Penalty Goals',
    'Penalty Goals',
    'Assists',
    'Yellow Cards',
    'Red Cards',
    'Expected xG',
    'Expected npxG',
    'Expected xAG',
    'Progression PrgC',
    'Progression PrgP',
    'Progression PrgR',
    'Per90Minutes Gls',
    'Per90Minutes Ast',
    'Per90Minutes G+A',
    'Per90Minutes G-PK',
    'Per90Minutes G+A-PK',
    'Per90Minutes xG',
    'Per90Minutes xAG',
    'Per90Minutes xG+xAG',
    'Per90Minutes npxG',
    'Per90Minutes npxG+xAG',
    'Goalkeeping_Performance GA',
    'Goalkeeping_Performance GA90',
    'Goalkeeping_Performance SoTA',
    'Goalkeeping_Performance Saves',
    'Goalkeeping_Performance Save%',
    'Goalkeeping_Performance W',
    'Goalkeeping_Performance D',
    'Goalkeeping_Performance L',
    'Goalkeeping_Performance CS',
    'Goalkeeping_Performance CS%',
    'Goalkeeping_PenaltyKicks PKAtt',
    'Goalkeeping_PenaltyKicks PKA',
    'Goalkeeping_PenaltyKicks PKsv',
    'Goalkeeping_PenaltyKicks PKm',
    'Goalkeeping_PenaltyKicks Save%',
    'Shooting_Standard Gls',
    'Shooting_Standard Sh',
    'Shooting_Standard SoT',
    'Shooting_Standard SoT%',
    'Shooting_Standard Sh/90',
    'Shooting_Standard SoT/90',
    'Shooting_Standard G/Sh',
    'Shooting_Standard G/SoT',
    'Shooting_Standard Dist',
    'Shooting_Standard FK',
    'Shooting_Standard PK',
    'Shooting_Standard PKatt',
    'Shooting_Expected xG',
    'Shooting_Expected npxG',
    'Shooting_Expected npxG/Sh',
    'Shooting_Expected G-xG',
    'Shooting_Expected np:G-xG',
    'Passing_Total Cmp',
    'Passing_Total Att',
    'Passing_Total Cmp%',
    'Passing_Total TotDist',
    'Passing_Total PrgDist',
    'Passing_Short Cmp',
    'Passing_Short Att',
    'Passing_Short Cmp%',
    'Passing_Medium Cmp',
    'Passing_Medium Att',
    'Passing_Medium Cmp%',
    'Passing_Long Cmp',
    'Passing_Long Att',
    'Passing_Long Cmp%',
    'Passing_Expected Ast',
    'Passing_Expected xAG',
    'Passing_Expected xA',
    'Passing_Expected A-xAG',
    'Passing_Expected KP',
    'Passing_Expected 1/3',
    'Passing_Expected PPA',
    'Passing_Expected CrsPA',
    'Passing_Expected PrgP',
    'PassTypes_PassTypes Live',
    'PassTypes_PassTypes Dead',
    'PassTypes_PassTypes FK',
    'PassTypes_PassTypes TB',
    'PassTypes_PassTypes Sw',
    'PassTypes_PassTypes Crs',
    'PassTypes_PassTypes TI',
    'PassTypes_PassTypes CK',
    'PassTypes_CornerKicks In',
    'PassTypes_CornerKicks Out',
    'PassTypes_CornerKicks Str',
    'PassTypes_Outcomes Cmp',
    'PassTypes_Outcomes Off',
    'PassTypes_Outcomes Blocks',
    'GoalAndShotCreation_SCA SCA',
    'GoalAndShotCreation_SCA SCA90',
    'GoalAndShotCreation_SCATypes PassLive',
    'GoalAndShotCreation_SCATypes PassDead',
    'GoalAndShotCreation_SCATypes TO',
    'GoalAndShotCreation_SCATypes Sh',
    'GoalAndShotCreation_SCATypes Fld',
    'GoalAndShotCreation_SCATypes Def',
    'GoalAndShotCreation_GCA GCA',
    'GoalAndShotCreation_GCA GCA90',
    'GoalAndShotCreation_GCATypes PassLive',
    'GoalAndShotCreation_GCATypes PassDead',
    'GoalAndShotCreation_GCATypes TO',
    'GoalAndShotCreation_GCATypes Sh',
    'GoalAndShotCreation_GCATypes Fld',
    'GoalAndShotCreation_GCATypes Def',
    'DefensiveActions_Tackles Tkl',
    'DefensiveActions_Tackles TklW',
    'DefensiveActions_Tackles Def 3rd',
    'DefensiveActions_Tackles Mid 3rd',
    'DefensiveActions_Tackles Att 3rd',
    'DefensiveActions_Challenges Tkl',
    'DefensiveActions_Challenges Att',
    'DefensiveActions_Challenges Tkl%',
    'DefensiveActions_Challenges Lost',
    'DefensiveActions_Blocks Blocks',
    'DefensiveActions_Blocks Sh',
    'DefensiveActions_Blocks Pass',
    'DefensiveActions_Blocks Int',
    'DefensiveActions_Blocks Tkl + Int',
    'DefensiveActions_Blocks Clr',
    'DefensiveActions_Blocks Err',
    'Possession_Touches Touches',
    'Possession_Touches Def Pen',
    'Possession_Touches Def 3rd',
    'Possession_Touches Mid 3rd',
    'Possession_Touches Att 3rd',
    'Possession_Touches Att Pen',
    'Possession_Touches Live',
    'Possession_TakeOns Att',
    'Possession_TakeOns Succ',
    'Possession_TakeOns Succ%',
    'Possession_TakeOns Tkld',
    'Possession_TakeOns Tkld%',
    'Possession_Carries Carries',
    'Possession_Carries TotDist',
    'Possession_Carries PrgDist',
    'Possession_Carries PrgC',
    'Possession_Carries 1/3',
    'Possession_Carries CPA',
    'Possession_Carries Mis',
    'Possession_Carries Dis',
    'Possession_Receiving Rec',
    'Possession_Receiving PrgR',
    'PlayingTime_Starts Starts',
    'PlayingTime_Starts Mn/Start',
    'PlayingTime_Starts Compl',
    'PlayingTime_Subs Subs',
    'PlayingTime_Subs Mn/Sub',
    'PlayingTime_Subs unSub',
    'PlayingTime_TeamSuccess PPM',
    'PlayingTime_TeamSuccess onG',
    'PlayingTime_TeamSuccess onGA',
    'PlayingTime_TeamSuccess_xG onxG',
    'PlayingTime_TeamSuccess_xG onxGA',
    'MiscellaneousStats_Performance Fls',
    'MiscellaneousStats_Performance Fld',
    'MiscellaneousStats_Performance Off',
    'MiscellaneousStats_Performance Crs',
    'MiscellaneousStats_Performance OG',
    'MiscellaneousStats_Performance Recov',
    'MiscellaneousStats_AerialDuels Won',
    'MiscellaneousStats_AerialDuels Lost',
    'MiscellaneousStats_AerialDuels Won%'
]]

for score in player_data.columns[4:]:  # Bỏ qua cột Player, Nation, Team, Position
    # không xét những cầu thủ mà tại chỉ số đó, dữ liệu là 'N/a'
    filtered_scores = player_data[player_data[score] != 'N/a'].copy()

    # chuyển đổi cột chỉ số thành kiểu số, bỏ qua lỗi nếu có
    filtered_scores[score] = pd.to_numeric(filtered_scores[score])

    # tìm top 3 cao nhất và thấp nhất
    top_3_highest = filtered_scores.nlargest(3, score)
    top_3_lowest = filtered_scores.nsmallest(3, score)

    print(f'Top 3 cầu thủ cao nhất tại chỉ số {score}:')
    print(top_3_highest)
    print(f'Top 3 cầu thủ thấp nhất tại chỉ số {score}:')
    print(top_3_lowest)